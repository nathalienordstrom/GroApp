{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  login: {\n    accessToken: null,\n    userId: 0,\n    username: null,\n    statusMessage: \"\"\n  }\n};\nexport var user = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    setAccessToken: function setAccessToken(state, action) {\n      var accessToken = action.payload.accessToken;\n      console.log(\"Access Token: \" + accessToken);\n      state.login.accessToken = accessToken;\n    },\n    setUserId: function setUserId(state, action) {\n      var userId = action.payload.userId;\n      console.log(\"User Id: \" + userId);\n      state.login.userId = userId;\n    },\n    setUsername: function setUsername(state, action) {\n      var username = action.payload.username;\n      state.login.username = username;\n    },\n    setStatusMessage: function setStatusMessage(state, action) {\n      var statusMessage = action.payload.statusMessage;\n      console.log(\"Status Message: \" + statusMessage);\n      state.login.statusMessage = statusMessage;\n    },\n    logout: function logout(state, action) {\n      console.log(\"Logging out\");\n      state.login.userId = 0;\n      state.login.accessToken = null;\n    }\n  }\n});\nexport var getOrganiser = function getOrganiser(userId, accessToken) {\n  return function (dispatch) {\n    fetch(\"http://localhost:8080/users/\" + userId + \"/organiser\", {\n      method: \"GET\",\n      headers: {\n        Authorization: accessToken\n      }\n    }).then(function (res) {\n      if (!res.ok) {\n        throw new Error(\"Couldn't get your organiser. Please check your username and password are correct\");\n      }\n\n      return res.json();\n    }).then(function (json) {\n      dispatch(user.actions.setStatusMessage({\n        statusMessage: json.statusMessage\n      }));\n    }).catch(function (error) {\n      dispatch(user.actions.setErrorMessage({\n        errorMessage: error.toString()\n      }));\n    });\n  };\n};\nvar SIGNUP_URL = \"http://localhost:8080/users\";\nexport var userSignup = function userSignup(username, password) {\n  return function (dispatch) {\n    fetch(SIGNUP_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(function (res) {\n      if (!res.ok) {\n        throw new Error(\"Sign up failed. Please enter a valid username and password\");\n      }\n\n      return res.json();\n    }).then(function (json) {\n      dispatch(user.actions.setAccessToken({\n        accessToken: json.accessToken\n      }));\n      dispatch(user.actions.setUserId({\n        userId: json.userId\n      }));\n      dispatch(user.actions.setUsername({\n        username: json.username\n      }));\n      dispatch(user.actions.setStatusMessage({\n        statusMessage: json.statusMessage\n      }));\n    }).catch(function (error) {\n      dispatch(user.actions.setUsername({\n        username: null\n      }));\n      dispatch(user.actions.setErrorMessage({\n        errorMessage: error.toString()\n      }));\n    });\n  };\n};\nexport var userLogin = function userLogin(username, password) {\n  return function (dispatch) {\n    fetch(\"http://localhost:8080/sessions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(function (res) {\n      if (!res.ok) {\n        throw new Error(\"Login failed. Please check your username and password\");\n      }\n\n      return res.json();\n    }).then(function (json) {\n      dispatch(user.actions.setAccessToken({\n        accessToken: json.accessToken\n      }));\n      dispatch(user.actions.setUserId({\n        userId: json.userId\n      }));\n      dispatch(user.actions.setUsername({\n        username: json.username\n      }));\n      dispatch(user.actions.setStatusMessage({\n        statusMessage: json.statusMessage\n      }));\n    }).catch(function (error) {\n      dispatch(user.actions.setUsername({\n        username: null\n      }));\n      dispatch(user.actions.setErrorMessage({\n        errorMessage: error.toString()\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/nathalienordstrom/Desktop/GroApp/GroApp/frontend/reducers/user.js"],"names":["createSlice","initialState","login","accessToken","userId","username","statusMessage","user","name","reducers","setAccessToken","state","action","payload","console","log","setUserId","setUsername","setStatusMessage","logout","getOrganiser","dispatch","fetch","method","headers","Authorization","then","res","ok","Error","json","actions","catch","error","setErrorMessage","errorMessage","toString","SIGNUP_URL","userSignup","password","body","JSON","stringify","userLogin"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  login: {\n    accessToken: null,\n    userId: 0,\n    username: null,\n    statusMessage: \"\",\n  },\n};\n\nexport const user = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    setAccessToken: (state, action) => {\n      const { accessToken } = action.payload;\n      console.log(`Access Token: ${accessToken}`);\n      state.login.accessToken = accessToken;\n    },\n    setUserId: (state, action) => {\n      const { userId } = action.payload;\n      console.log(`User Id: ${userId}`);\n      state.login.userId = userId;\n    },\n    setUsername: (state, action) => {\n      const { username } = action.payload;\n      state.login.username = username;\n  },\n    setStatusMessage: (state, action) => {\n      const { statusMessage } = action.payload;\n      console.log(`Status Message: ${statusMessage}`);\n      state.login.statusMessage = statusMessage;\n    },\n    logout: (state, action) => {\n      console.log(\"Logging out\");\n      state.login.userId = 0;\n      state.login.accessToken = null;\n    },\n  },\n});\n\nexport const getOrganiser = (userId, accessToken) => {\n  return(dispatch) => {\n      fetch(`http://localhost:8080/users/${userId}/organiser`,{\n          method: \"GET\",\n          headers: { Authorization: accessToken },\n      })\n      .then((res) => {\n          if(!res.ok) {\n              throw new Error(\n                  \"Couldn't get your organiser. Please check your username and password are correct\"\n              );\n          } return res.json(); \n      })\n      .then((json) => {\n          dispatch(user.actions.setStatusMessage({ statusMessage: json.statusMessage }));\n      })\n      .catch((error) => {\n          dispatch(user.actions.setErrorMessage({ errorMessage: error.toString()}))\n      })\n  };\n};\n\n\nconst SIGNUP_URL = \"http://localhost:8080/users\";\n\nexport const userSignup = (username, password) => {\n    return(dispatch) => {\n        fetch(SIGNUP_URL, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\"},\n            body: JSON.stringify({ username, password }),\n        })\n        .then((res) => {\n            if(!res.ok) {\n                throw new Error(\n                    \"Sign up failed. Please enter a valid username and password\"\n                );\n            } return res.json();\n        })\n        .then((json) => {\n            dispatch(user.actions.setAccessToken({ accessToken: json.accessToken })); \n            dispatch(user.actions.setUserId({ userId: json.userId}));\n            dispatch(user.actions.setUsername({ username: json.username }));        \n            dispatch(user.actions.setStatusMessage({ statusMessage: json.statusMessage}));      \n        })\n        .catch((error) => { \n            dispatch(user.actions.setUsername({ username: null }));\n            dispatch(user.actions.setErrorMessage({ errorMessage: error.toString()}));\n        })\n\n    }\n}\n\nexport const userLogin = (username, password) => {\n  return(dispatch) => {\n      fetch(\"http://localhost:8080/sessions\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ username, password }),\n      })\n      .then((res) => {\n          if(!res.ok) {\n              throw new Error(\n                  \"Login failed. Please check your username and password\"\n              );\n          } return res.json(); \n      })               \n      .then((json) => {\n          dispatch(user.actions.setAccessToken({ accessToken: json.accessToken }));\n          dispatch(user.actions.setUserId({ userId: json.userId}));      \n          dispatch(user.actions.setUsername({ username: json.username }));        \n          dispatch(user.actions.setStatusMessage({ statusMessage: json.statusMessage})); \n      })\n      .catch((error) => { \n          dispatch(user.actions.setUsername({ username: null }));\n          dispatch(user.actions.setErrorMessage({ errorMessage: error.toString()}));\n      })\n  };\n};"]},"metadata":{},"sourceType":"module"}